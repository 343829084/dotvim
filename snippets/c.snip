# Include-Guard
snippet once
abbr include-guard
    #ifndef `toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g"))`_`toupper(substitute(expand("%:t"),"\\.","_","g"))`_
    #define `toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g"))`_`toupper(substitute(expand("%:t"),"\\.","_","g"))`_

    namespace `tolower(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g"))` {

	/**
	 * @brief ${1}
	 */
    class `substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
    {
    public:
        ${0}
    };

    }

    #endif /* end of include guard */

# Include-Guard，以上层目录名为名字空间，前面再加上一层sscc::名字空间
snippet h1
abbr include-guard
	/**
	 * @file
	 * @brief  ${1:`substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`类的声明}
	 * @author `$USER`
	 */
    #ifndef SSCC_`toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g")."_")``toupper(substitute(expand("%:t"),"\\.","_","g"))`_
    #define SSCC_`toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g")."_")``toupper(substitute(expand("%:t"),"\\.","_","g"))`_

    namespace sscc { namespace `tolower(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g"))` {

	/**
	 * @brief ${2}
	 */
    class `substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
    {
    public:
        ${0}
    };

    }}

    #endif /* end of include guard */

# Include-Guard，以上上层目录名为名字空间，前面再加上一层sscc::名字空间
snippet h2
abbr include-guard
	/**
	 * @file
	 * @brief  ${1:`substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`类的声明}
	 * @author `$USER`
	 */
    #ifndef SSCC_`toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:h:t")."/".expand("%:p:h:h:t"),"/include","",""),":t"),"\\.","_","g")."_")``toupper(substitute(expand("%:t"),"\\.","_","g"))`_
    #define SSCC_`toupper(substitute(fnamemodify(substitute(expand("%:p:h:h:h:t")."/".expand("%:p:h:h:t"),"/include","",""),":t"),"\\.","_","g")."_")``toupper(substitute(expand("%:t"),"\\.","_","g"))`_

    namespace sscc { namespace `tolower(substitute(fnamemodify(substitute(expand("%:p:h:h:h:t")."/".expand("%:p:h:h:t"),"/include","",""),":t"),"\\.","_","g"))` {

	/**
	 * @brief ${2}
	 */
    class `substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
    {
    public:
        ${0}
    };

    }}

    #endif /* end of include guard */

snippet c1
abbr include-guard
	/**
	 * @file
	 * @brief  ${1:`substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`类的定义}
	 * @author `$USER`
	 */
    #include "`expand("%:t:r")`.h"

    namespace sscc { namespace `tolower(substitute(fnamemodify(substitute(expand("%:p:h:h:t")."/".expand("%:p:h:t"),"/include","",""),":t"),"\\.","_","g"))` {

    ${0}

    }}


snippet c2
abbr include-guard
	/**
	 * @file
	 * @brief  ${1:`substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`类的定义}
	 * @author `$USER`
	 */
    #include "`expand("%:t:r")`.h"

    namespace sscc { namespace `tolower(substitute(fnamemodify(substitute(expand("%:p:h:h:h:t")."/".expand("%:p:h:h:t"),"/src","",""),":t"),"\\.","_","g"))` {

    ${0}

    }}


# File declaration
snippet fc
prev_word '^'
	/**
	 * @file
	 * @brief  ${1}
	 * @author `$USER`
	 */
	${0}

# Boost.Test
snippet ut
	#include <boost/test/unit_test.hpp>
	#include "../`substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

	using namespace `substitute(expand("%:p:h:h:t"),"\\.","_","g")`;
    using boost::system::error_code;

	BOOST_AUTO_TEST_SUITE(test_`substitute(expand("%:t:r"), "^test_\\?", "", "")`)

	BOOST_AUTO_TEST_CASE(Test${1})
	{
	    `substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${2:`substitute(expand("%:t:r"), "^test_\\?", "", "")`}
	}

	BOOST_AUTO_TEST_SUITE_END()

# Boost.Test
snippet sut
	#include <boost/test/unit_test.hpp>
	#include "../`substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

	using namespace sscc::`substitute(expand("%:p:h:h:t"),"\\.","_","g")`;
    using boost::system::error_code;

	BOOST_AUTO_TEST_SUITE(test_`substitute(expand("%:t:r"), "^test_\\?", "", "")`)

	BOOST_AUTO_TEST_CASE(Test${1})
	{
	    `substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${2:`substitute(expand("%:t:r"), "^test_\\?", "", "")`}
	}

	BOOST_AUTO_TEST_SUITE_END()

# Boost.Test
snippet sut2
	#include <boost/test/unit_test.hpp>
	#include "`substitute(expand("%:p:h:h:h:t"),"\\.","_","g")`/`substitute(expand("%:p:h:t"),"\\.","_","g")`/`substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

	using namespace sscc::`substitute(expand("%:p:h:h:h:t"),"\\.","_","g")`;
    using boost::system::error_code;

	BOOST_AUTO_TEST_SUITE(test_`substitute(expand("%:t:r"), "^test_\\?", "", "")`)

	BOOST_AUTO_TEST_CASE(Test${1})
	{
	    `substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${2:`substitute(expand("%:t:r"), "^test_\\?", "", "")`}
	}

	BOOST_AUTO_TEST_SUITE_END()

# Comment for unit test
snippet test_comment
    /**
     * @brief ${1}
     *
     * <b>输入数据：</b> ${2}
     *
     * <b>预期输出：</b> ${3}
     */
